{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helper.ts","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","memo","selectedTodoId","dispatch","length","className","map","id","completed","title","onClick","TodoFilter","queryValue","filterValue","value","onChange","event","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","TodoModal","useState","user","setUser","useEffect","a","userFromServer","fetchUser","href","name","App","todosRedux","visibleTodos","useMemo","isFiltered","isIncludeQuery","toLowerCase","includes","getVisibleTodos","todosFromServer","todosActions","fetchTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f79e628e.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type QueryFilterAction = {\n  type: 'queryFilter/SET';\n  payload: string;\n};\n\nconst setQueryFilter = (query: string): QueryFilterAction => ({\n  type: 'queryFilter/SET',\n  payload: query,\n});\n\ntype StatusFilterAction = {\n  type: 'statusFilter/SET';\n  payload: string;\n};\n\nconst setStatusFilter = (status: string): StatusFilterAction => ({\n  type: 'statusFilter/SET',\n  payload: status,\n});\n\nexport const actions = { setQueryFilter, setStatusFilter };\n\ntype State = {\n  query: string,\n  status: string,\n};\ntype Action = StatusFilterAction | QueryFilterAction;\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'statusFilter/SET':\n      return { ...state, status: action.payload };\n    case 'queryFilter/SET':\n      return { ...state, query: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'currentTodos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'currentTodos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'currentTodos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { memo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodoId: number;\n}\n\nexport const TodoList: React.FC<Props> = memo(({\n  todos,\n  selectedTodoId,\n}) => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <>\n      {todos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {todos.length !== 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => (\n              <tr key={todo.id} data-cy=\"todo\" className=\"\">\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => dispatch(actions.setTodo(todo))}\n                  >\n                    <span className=\"icon\">\n                      <i className={selectedTodoId === todo.id\n                        ? 'far fa-eye-slash'\n                        : 'far fa-eye'}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n});\n","import { FC, memo } from 'react';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\n\ninterface Props {\n  queryValue: string;\n  filterValue: string;\n}\nexport const TodoFilter: FC<Props> = memo(({\n  queryValue,\n  filterValue,\n}) => {\n  const dispatch = useAppDispatch();\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterValue}\n            onChange={(event) => {\n              dispatch(filterActions.setStatusFilter(event.target.value));\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={queryValue}\n          onChange={(event) => {\n            dispatch(filterActions.setQueryFilter(event.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {queryValue && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setQueryFilter(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { memo, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { actions } from '../../features/currentTodo';\nimport { useAppDispatch } from '../../app/hooks';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoModal: React.FC<Props> = memo(({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    async function fetchUser() {\n      const userFromServer = await getUser(todo.userId);\n\n      setUser(userFromServer);\n    }\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user.name}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","/* eslint-disable max-len */\nimport React, {\n  useEffect,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { getVisibleTodos } from './helper';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todosRedux = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const visibleTodos = useMemo(() => (\n    getVisibleTodos(todosRedux, query, status)\n  ), [query, status, todosRedux]);\n\n  async function fetchTodos() {\n    const todosFromServer = await getTodos();\n\n    dispatch(todosActions.setTodos(todosFromServer));\n  }\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                queryValue={query}\n                filterValue={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todosRedux.length ? (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodoId={currentTodo?.id || 0}\n                />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {currentTodo && (\n        <TodoModal\n          todo={currentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  query: string,\n  filter: string,\n) => {\n  if (filter !== 'all' || query) {\n    return todos.filter(todo => {\n      const isIncludeQuery = todo.title.toLowerCase()\n        .includes(query.toLowerCase());\n\n      let isFiltered;\n\n      switch (filter) {\n        case 'active':\n          isFiltered = !todo.completed;\n          break;\n\n        case 'completed':\n          isFiltered = todo.completed;\n          break;\n\n        default:\n          isFiltered = true;\n          break;\n      }\n\n      return isIncludeQuery && isFiltered;\n    });\n  }\n\n  return todos;\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}